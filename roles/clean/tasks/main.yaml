---
- name: Get user variables
  ansible.builtin.user:
    name: root
    state: present
  register: user

- name: Run apt autoremove
  ansible.builtin.apt:
    autoremove: true
    purge: true

- name: Run apt autoclean
  ansible.builtin.apt:
    autoclean: true
    
- name: Get list of files in /var/cache/
  ansible.builtin.find:
    paths: /var/cache/
    file_type: file
  register: cleanup
  ignore_errors: true

- name: Delete files in /var/cache/
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ cleanup.files }}"
  ignore_errors: true
  no_log: true

- name: Get list of files in /var/log/
  ansible.builtin.find:
    paths: /var/log/
    file_type: file
  register: cleanup

- name: Delete files in /var/log
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ cleanup.files }}"
  ignore_errors: true
  no_log: true

- name: Recursively find /tmp files older than 2 days
  ansible.builtin.find:
    paths: /tmp
    age: 2d
    recurse: true
  register: cleanup
  
- name: Delete /tmp files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ cleanup.files }}"
  ignore_errors: true
  no_log: true
  
- name: Get list of files in /var/lib/apt/lists/
  ansible.builtin.find:
    paths: /var/lib/apt/lists/
  register: cleanup
  ignore_errors: true

- name: Delete files in /var/lib/apt/lists/
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ cleanup.files }}"
  ignore_errors: true
  no_log: true

- name: Run apt update
  ansible.builtin.apt:
    update_cache: true

- name: Get mount
  ansible.builtin.set_fact:
    mount: "{{ ansible_mounts | first }}"

- set_fact: disk_usage="{{ mount.size_total - mount.size_available }}"
- set_fact: disk_usage_ratio="{{ disk_usage|float / mount.size_total }}"
# - set_fact: disk_usage_s="{{ (disk_usage|float / 1000000000) | round(1, 'common') }}GB"
- set_fact: disk_usage_s="{{ (disk_usage|float / (1024*1024*1024)) | round(2, 'common') }}GB"
# - set_fact: disk_total_s="{{ (mount.size_total / 1000000000) | round(1, 'common') }}GB"
- set_fact: disk_total_s="{{ (mount.size_total / (1024*1024*1024)) | round(2, 'common') }}GB"
- set_fact: disk_usage_ratio_s="{{ 100 * (disk_usage_ratio|float) | round(2, 'common') }}%"
# - set_fact: disk_limit_ratio_s="{{ (100 * disk_limit|float) |round }}%"

- debug:
    msg: "disk usage {{ disk_usage_s }} of total {{ disk_total_s }} ({{ disk_usage_ratio_s }} {{ disk_usage }} {{ mount.size_available }} {{ mount.size_total }} {{ mount.device }})"

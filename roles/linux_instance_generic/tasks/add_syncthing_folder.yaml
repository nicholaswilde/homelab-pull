---
- name: "Add control node folder to the managed node"
  block:
    - name: "Get a list of folders on the managed node"
      ansible.builtin.command: 'syncthing cli config folders list'
      register: managed_node_folders
      become_user: "{{ syncthing_run_user }}"
      changed_when: false
      ignore_errors: true

    - name: "managed_node_folders"
      ansible.builtin.debug:
        var: managed_node_folders.stdout_lines
      when: managed_node_folders.stdout_lines is defined and debug_enabled

    - name: "Add control node folder to managed node"
      ansible.builtin.command: 'syncthing cli config folders add --id "rpmhl-qggvt" --label "ssh" --path "~/.ssh"'
      register: add_folder_result
      become_user: "{{ syncthing_run_user }}"
      ignore_errors: true
      when: "'rpmhl-qggvt' not in managed_node_folders.stdout_lines"
  ignore_errors: true

- name: "Add control node to the managed node folder"
  block:
    - name: "Get a list of devices from the managed node folder"
      ansible.builtin.command: "syncthing cli config folders rpmhl-qggvt dump-json"
      register: get_folder_result
      become_user: "{{ syncthing_run_user }}"
      changed_when: false
      ignore_errors: true

    - name: "Extract the list of device objects from the folder"
      ansible.builtin.set_fact:
        folder_objects: "{{ get_folder_result.json.devices | default([]) }}"

    - name: "Create a list map of just the device IDs from the folder"
      ansible.builtin.set_fact:
        device_id_list: "{{ folder_objects | map(attribute='deviceID') | list }}"
      when: folder_objects is iterable and folder_objects is not string

    - name: "Display the list of Device IDs"
      ansible.builtin.debug:
        var: device_id_list
      when: device_id_list is defined and debug_enabled

    - name: "Add control node to the manage node folder"
      ansible.builtin.uri:
        # url: "{{ managed_node_api_folders_endpoint }}/{{ folder.id }}"
        url: "{{ managed_node_api_folders_endpoint }}/rpmhl-qggvt"
        method: PATCH
        body_format: json
        headers:
          X-API-Key: "{{ managed_node_api_key | string }}"
          Content-Type: "application/json"
        status_code: [200, 202, 204]
        body: '{ "devices": [ { "deviceID": "{{ control_node_device_id }}" } ] }'
      register: add_result
      when: control_node_device_id is defined and control_node_device_id not in device_id_list
  when: managed_node_api_key is defined and not url_check_result.failed
  ignore_errors: true

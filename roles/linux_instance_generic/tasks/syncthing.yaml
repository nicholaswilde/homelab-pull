---
- name: "Check if Syncthing is installed"
  ansible.builtin.command: "syncthing --version"
  register: syncthing_is_installed
  changed_when: syncthing_is_installed.rc != 0
  ignore_errors: true

- name: "Install Syncthing using APT"
  block:
    - name: "Update apt cache"
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      changed_when: false

    - name: "Install prerequisites for adding apt repository"
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
        update_cache: true

    - name: "Ensure keyring directory exists"
      ansible.builtin.file:
        path: "{{ syncthing_keyring_path | dirname }}"
        state: directory
        mode: '0755'

    - name: "Download Syncthing GPG key"
      ansible.builtin.get_url:
        url: https://syncthing.net/release-key.gpg
        dest: "{{ syncthing_keyring_path }}"
        mode: '0644'
        force: false
      become: true

    - name: "Add Syncthing APT repository"
      ansible.builtin.apt_repository:
        repo: "deb [signed-by={{ syncthing_keyring_path }} arch={{ syncthing_repo_arch }}] https://apt.syncthing.net/ syncthing stable"
        state: present
        filename: syncthing
        # update_cache: true

    - name: "Install Syncthing package"
      ansible.builtin.apt:
        name: syncthing
        state: present
        update_cache: true
      become: true

    - name: "Display Syncthing version (optional)"
      ansible.builtin.command: "syncthing --version"
      register: syncthing_version_output
      changed_when: false

    - name: "Print Syncthing version"
      ansible.builtin.debug:
        msg: "{{ syncthing_version_output.stdout }}"
      when: syncthing_version_output is defined

    - name: "Check if user lingering is already enabled"
      ansible.builtin.command: "loginctl show-user {{ syncthing_run_user }} -p Linger"
      register: linger_status
      changed_when: false
      failed_when: linger_status.rc != 0 and "does not exist" not in linger_status.stderr
      check_mode: false

    - name: "Enable systemd lingering for the Syncthing user (recommended for auto-start on boot)"
      ansible.builtin.command: "loginctl enable-linger {{ syncthing_run_user }}"
      when: "'Linger=no' in linger_status.stdout or 'does not exist' in linger_status.stderr"
      changed_when: true
      check_mode: false

    - name: "Enable and start the Syncthing service for the specified user"
      ansible.builtin.systemd_service:
        name: "{{ syncthing_service_name }}"
        enabled: true
        state: started
      become: true

    - name: "Wait up to 20 seconds for port 8384 to become open on the target host"
      ansible.builtin.wait_for:
        port: 8384
        delay: 5
        timeout: 20

    - name: "Change Syncthing setting"
      ansible.builtin.command: "{{ item }}"
      become_user: "{{ syncthing_run_user }}"
      ignore_errors: true
      loop:
        - "syncthing cli config gui raw-address set \"0.0.0.0:8384\""
        - "syncthing cli config options natenabled set false"
        - "syncthing cli config options local-ann-enabled set false"
        - "syncthing cli config options global-ann-enabled set false"
        - "syncthing cli config options relays-enabled set false"
        - "syncthing cli config options uraccepted set 3"
        - "syncthing cli config options urseen set 3"
        - "syncthing cli config gui user set nicholas"
        - "syncthing cli config gui password set {{ ansible_become_pass }}"
        - "syncthing cli operations restart"

    - name: "Wait up to 20 seconds for port 8384 to become open on the target host"
      ansible.builtin.wait_for:
        port: 8384
        delay: 5
        timeout: 20

  vars:
    syncthing_keyring_path: "/etc/apt/keyrings/syncthing-archive-keyring.gpg"
    syncthing_repo_arch: "{{ ansible_architecture | replace('x86_64', 'amd64') | replace('aarch64', 'arm64') }}"
    syncthing_run_user: "{{ ansible_user }}"
    syncthing_service_name: "syncthing@{{ syncthing_run_user }}.service"
  when: syncthing_is_installed.rc != 0

- name: "Get the api key"
  ansible.builtin.command: "syncthing cli config gui apikey get"
  register: api_key
  become_user: "{{ ansible_user }}"
  ignore_errors: true

- name: "Show api key"
  ansible.builtin.debug:
    msg: "{{ api_key.stdout }}"
  when: api_key is defined

- name: "Syncthing settings block"
  block:
    - name: "Send DELETE request to remove default folder config"
      ansible.builtin.uri:
        url: "{{ api_endpoint }}"
        method: DELETE
        headers:
          X-API-Key: "{{ api_key.stdout }}"
        # Optional: Define expected successful status codes.
        # DELETE might return 200 (OK), 202 (Accepted), or 204 (No Content) on success.
        status_code: [200, 202, 204]
        # Optional: If you need to see the response body (often empty for DELETE)
        # return_content: yes
      register: delete_result
    
    - name: "Show DELETE request result"
      ansible.builtin.debug:
        var: delete_result.msg
      when: delete_result is defined

    - name: "Get the device id"
      ansible.builtin.command: "syncthing cli config devices list"
      register: device_ids
      become_user: "{{ ansible_user }}"
      ignore_errors: true
    
    - name: "Show device ids result"
      ansible.builtin.debug:
        var: device_ids
      when: device_ids is defined
      
    - name: "Set fact for device id"
      ansible.builtin.set_fact:
        device_id: " {{ device_ids.stdout_lines[0] }} "
      when: device_ids | length > 0
      
    - name: "Show device id"
      ansible.builtin.debug:
        var: device_id
      when: device_id is defined

  vars:
    api_endpoint: "http://localhost:8384/rest/config/folders/default"
  when: api_key is defined

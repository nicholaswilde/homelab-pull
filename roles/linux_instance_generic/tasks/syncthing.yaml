---
- name: "Check if Syncthing is installed"
  ansible.builtin.command: "syncthing --version"
  register: syncthing_version_output
  changed_when: false
  ignore_errors: true

- name: "Install Syncthing using APT"
  block:
    - name: "Update apt cache"
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      changed_when: false

    - name: "Install prerequisites for adding apt repository"
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
        update_cache: true

    - name: "Ensure keyring directory exists"
      ansible.builtin.file:
        path: "{{ syncthing_keyring_path | dirname }}"
        state: directory
        mode: '0755'

    - name: "Download Syncthing GPG key"
      ansible.builtin.get_url:
        url: https://syncthing.net/release-key.gpg
        dest: "{{ syncthing_keyring_path }}"
        mode: '0644'
        force: false
      become: true

    - name: "Add Syncthing APT repository"
      ansible.builtin.apt_repository:
        repo: "deb [signed-by={{ syncthing_keyring_path }} arch={{ syncthing_repo_arch }}] https://apt.syncthing.net/ syncthing stable"
        state: present
        filename: syncthing
        # update_cache: true

    - name: "Install Syncthing package"
      ansible.builtin.apt:
        name: syncthing
        state: present
        update_cache: true
      become: true

    - name: "Display Syncthing version (optional)"
      ansible.builtin.command: "syncthing --version"
      register: syncthing_version_output
      changed_when: false

    - name: "Print Syncthing version"
      ansible.builtin.debug:
        msg: "{{ syncthing_version_output.stdout }}"
      when: syncthing_version_output is defined

    - name: "Check if user lingering is already enabled"
      ansible.builtin.command: "loginctl show-user {{ syncthing_run_user }} -p Linger"
      register: linger_status
      changed_when: false
      failed_when: linger_status.rc != 0 and "does not exist" not in linger_status.stderr
      check_mode: false

    - name: "Enable systemd lingering for the Syncthing user (recommended for auto-start on boot)"
      ansible.builtin.command: "loginctl enable-linger {{ syncthing_run_user }}"
      when: "'Linger=no' in linger_status.stdout or 'does not exist' in linger_status.stderr"
      changed_when: true
      check_mode: false

    - name: "Enable and start the Syncthing service for the specified user"
      ansible.builtin.systemd_service:
        name: "{{ syncthing_service_name }}"
        # scope: user
        enabled: true
        state: started
      become: true
      # become_user: "{{ syncthing_run_user }}"
      # environment:
      #   XDG_RUNTIME_DIR: "/run/user/{{ lookup('pipe', 'id -u ' + syncthing_run_user) }}"
      #   DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ lookup('pipe', 'id -u ' + syncthing_run_user) }}/bus"

    - name: "Pause for 5 seconds"
      ansible.builtin.pause:
        seconds: 5
        echo: false
      
    - name: "Ensure Syncthing GUI listens on all interfaces"
      ansible.builtin.replace:
        path: "{{ ansible_env.HOME }}/.local/state/syncthing/config.xml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
        backup: true
      loop:
        - { regexp: '127\.0\.0\.1:8384', replace: '0.0.0.0:8384' }
        - { regexp: 'tls=false', replace: 'tls=true' }
        - { regexp: 'globalAnnounceEnabled=true', replace: 'globalAnnounceEnabled=false' }
        - { regexp: 'localAnnounceEnabled=true', replace: 'localAnnounceEnabled=false' }
        - { regexp: 'natEnabled=true', replace: 'natEnabled=false' }

    - name: "Restart Syncthing systemd service"
      ansible.builtin.systemd_service:
        name: "{{ syncthing_service_name }}"
        state: restarted
        # scope: user

  vars:
    syncthing_keyring_path: /etc/apt/keyrings/syncthing-archive-keyring.gpg
    syncthing_repo_arch: "{{ ansible_architecture | replace('x86_64', 'amd64') | replace('aarch64', 'arm64') }}"
    syncthing_run_user: "{{ ansible_user }}"
    syncthing_service_name: "syncthing@{{ syncthing_run_user }}.service"
  when: syncthing_version_output.rc != 0

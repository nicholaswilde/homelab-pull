---
- name: "Beszel agent block"
  vars:
    app_name: "beszel-agent"  # The command name of the application
    repo_name: "beszel"
    owner_name: "henrygd"
    app_version_command: "{{ app_name }} version"
    version_regex: '(\d+\.\d+\.\d+)'
    github_api_url: "https://api.github.com/repos/{{ owner_name }}/{{ repo_name }}/releases/latest"
  block:
    - name: "Query GitHub API for latest beszel release"
      ansible.builtin.uri:
        url: "{{ github_api_url }}"
        method: GET
        return_content: true
        body_format: json
        status_code: 200
        headers:
          Accept: "application/vnd.github.v3+json"
          User-Agent: "Ansible-Playbook"
      register: github_release_info
      # Optional: Make task robust against temporary network issues
      retries: 3
      delay: 5
      until: github_release_info.status == 200

    - name: "Extract and store the latest version tag"
      ansible.builtin.set_fact:
        desired_version: "{{ github_release_info.json.tag_name | regex_search(version_regex, '\\1') | first | default('none') }}"
      when:
        - github_release_info.status == 200
        - github_release_info.json is defined

    - name: "Check current version of {{ app_name }}"
      ansible.builtin.command: "{{ app_version_command }}"
      register: version_check_result
      changed_when: false
      failed_when: false

    - name: "Parse current version of {{ app_name }} if installed" # noqa: name[template]
      ansible.builtin.set_fact:
        current_version: "{{ version_check_result.stdout | regex_search(version_regex, '\\1') | first | default('none') }}"
      when: version_check_result.rc == 0

    - name: "Another cheat block"
      when:
        - version_check_result.rc != 0 or
          (version_check_result.rc == 0 and
          current_version | default('0.0.0') is version(desired_version, '!='))
          # - current_version | default('none') != desired_version
      block:
        - name: "Show desigred version"
          ansible.builtin.debug:
            msg: "desired_version: {{ desired_version }}\ncurrent_version: {{ current_version }}"
          when: current_version is defined

        - name: "Create beszel agent service file"
          ansible.builtin.template:
            src: beszel-agent.service.j2
            dest: "/etc/systemd/system/beszel-agent.service"

        - name: "Setup update service"
          ansible.builtin.copy:
            src: beszel-agent-update.service
            dest: "/etc/systemd/system/beszel-agent-update.service"

        - name: "Setup timer"
          ansible.builtin.copy:
            src: beszel-agent-update.timer
            dest: "/etc/systemd/system/beszel-agent-update.timer"

        - name: "Just force systemd to reread configs"
          ansible.builtin.systemd_service:
            daemon_reload: true
            name: beszel-agent.service
            enabled: true
            state: started
          ignore_errors: true

        - name: "Enable beszel-agent-update.timer"
          ansible.builtin.systemd_service:
            name: beszel-agent-update.timer
            state: started
            enabled: true
          ignore_errors: true

        - name: "Check if the target URL is reachable"
          ansible.builtin.uri:
            url: "https://installer.l.nicholaswilde.io/henrygd/beszel?as=beszel-agent"
            method: GET
            status_code: 200
            timeout: 5
          register: url_check_result
          ignore_errors: true
          no_log: true

        - name: "Install beszel-agent"
          ansible.builtin.shell: "curl -s https://installer.l.nicholaswilde.io/henrygd/beszel?as=beszel-agent | bash" # noqa: command-instead-of-module
          args:
            chdir: "/usr/local/bin"
          when: not url_check_result.failed
          ignore_errors: true

        - name: "Install beszel-agent"
          ansible.builtin.shell: "curl -s https://i.jpillora.com/henrygd/beszel?as=beszel-agent | bash" # noqa: command-instead-of-module
          args:
            chdir: "/usr/local/bin"
          when: url_check_result.failed
          ignore_errors: true

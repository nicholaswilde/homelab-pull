---

- name: cheat block
  block:
    - name: Query GitHub API for latest cheat release
      ansible.builtin.uri:
        url: "{{ github_api_url }}"
        method: GET
        return_content: yes # Return the body of the response
        body_format: json   # Automatically parse the JSON response body
        status_code: 200    # Expect a successful HTTP 200 status code
        headers:
          # GitHub API prefers an Accept header, though often works without
          Accept: "application/vnd.github.v3+json"
          # Add User-Agent, good practice for APIs
          User-Agent: "Ansible-Playbook"
          # Note: For frequent use or private repos, add authentication via Authorization header
          # Authorization: "token YOUR_GITHUB_TOKEN"
      register: github_release_info
      # Optional: Make task robust against temporary network issues
      # retries: 3
      # delay: 5
      # until: github_release_info.status == 200

    - name: Extract and store the latest version tag
      ansible.builtin.set_fact:
        desired_version: "{{ github_release_info.json.tag_name }}"
      # Ensure this runs only if the API call was successful and returned JSON
      when: github_release_info.status == 200 and github_release_info.json is defined
    - name: show desired version
      ansible.builtin.debug:
        msg: "desired_version: {{ desired_version }}"
    - name: "Check current version of {{ app_name }}"
      ansible.builtin.command: "{{ app_version_command }}"
      register: version_check_result
      changed_when: false # Checking version doesn't change state
      failed_when: false  # IMPORTANT: Prevent failure if command not found/fails
    - name:
      ansible.builtin.debug:
        msg: "version_check_result: {{ version_check_result.stdout }}"
    - name: "Parse current version of {{ app_name }} if installed"
      ansible.builtin.set_fact:
        # Extract the version using regex. Provides 'none' if not found or command failed.
        current_version: "{{ version_check_result.stdout | regex_search(version_regex, '\\1') | first | default('none') }}"
      # Only try to parse if the command succeeded
      when: version_check_result.rc == 0
    - name:
      ansible.builtin.debug:
        msg: "desired_version: {{ desired_version }}, version_check_result.rc {{ version_check_result.rc }}"
    - name: another block
      block:
        - name: Create cheat directory
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.config/cheat/"
            state: directory

        - name: Download cheat config file
          ansible.builtin.get_url:
            url: https://github.com/nicholaswilde/dotfiles2/raw/refs/heads/main/.config/cheat/conf.yml
            dest: "{{ ansible_env.HOME }}/.config/cheat/conf.yml"

        - name: Download cheat config file
          ansible.builtin.uri:
            url: https://installer.l.nicholaswilde.io/cheat/cheat?type=script
            return_content: true
          register: this

        - name: Write install script to file
          ansible.builtin.copy:
            content: "{{ this.content }}"
            dest: "/tmp/cheat.sh"
            mode: 0755

        - name: Execute the remote bash script using shell
          ansible.builtin.shell:
            cmd: "/tmp/cheat.sh"
            chdir: "/tmp/"

        - name: Move cheat
          ansible.builtin.copy:
            src: "/tmp/cheat"
            dest: "/usr/local/bin/cheat"
            remote_src: true
            mode: 0755
            force: true

        - name: Cleanup files
          ansible.builtin.file:
            path: "{{ item }}"   # The exact path to the file you want to delete
            state: absent     # This tells Ansible to make sure the file does not exist
          loop:
            - /tmp/cheat
            - /tmp/cheat.sh
      when:
        - version_check_result.rc != 0 or
          (version_check_result.rc == 0 and
          current_version | default('0.0.0') is version(desired_version, '!='))
          # - current_version | default('none') != desired_version
  vars:
    app_name: "cheat"  # The command name of the application
    repo_name: "cheat"
    owner_name: "cheat"
    app_version_command: "{{ app_name }} --version"
    # desired_version: "4.4.3"  # The specific version you want installed
    version_regex: '(\d+\.\d+\.\d+)'
    github_api_url: "https://api.github.com/repos/{{ owner_name }}/{{ repo_name }}/releases/latest"

---
- name: "cheat block"
  block:
    - name: "Query GitHub API for latest cheat release"
      ansible.builtin.uri:
        url: "{{ github_api_url }}"
        method: GET
        return_content: true
        body_format: json
        status_code: 200
        headers:
          Accept: "application/vnd.github.v3+json"
          User-Agent: "Ansible-Playbook"
      register: github_release_info
      retries: 3
      delay: 5
      until: github_release_info.status == 200

    - name: "Extract and store the latest version tag"
      ansible.builtin.set_fact:
        desired_version: "{{ github_release_info.json.tag_name }}"
      when:
        - github_release_info.status == 200
        - github_release_info.json is defined

    - name: "Show desired_version"
      ansible.builtin.debug:
        var: desired_version
      when:
        - desired_version is defined
        - debug_enabled

    - name: "Check current version of {{ app_name }}"
      ansible.builtin.command: "{{ app_version_command }}"
      register: version_check_result
      changed_when: false
      failed_when: false

    - name: "Show version check results"
      ansible.builtin.debug:
        var: version_check_result.stdout
      when:
        - version_check_result.stdout is defined
        - debug_enabled

    - name: "Parse current version of {{ app_name }} if installed"
      ansible.builtin.set_fact:
        current_version: "{{ version_check_result.stdout | regex_search(version_regex, '\\1') | first | default('none') }}"
      when: version_check_result.rc == 0

    - name: "Show desired version"
      ansible.builtin.debug:
        msg:
          - "desired_version: {{ desired_version }}"
          - "current_version: {{ current_version }}"
      when:
        - desired_version is defined
        - current_version is defined

    - name: "Another cheat block"
      block:
        - name: "Create cheat directory"
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.config/cheat/"
            state: directory

        - name: "Check if the target URL is reachable"
          ansible.builtin.uri:
            url: "https://installer.l.nicholaswilde.io/cheat/cheat?type=script"
            method: GET
            status_code: 200
            timeout: 5
          register: url_check_result
          ignore_errors: true
          no_log: true

        - name: "Download cheat install file using own domain"
          ansible.builtin.uri:
            url: "https://installer.l.nicholaswilde.io/cheat/cheat?type=script"
            return_content: true
          register: this
          ignore_errors: true
          when: not url_check_result.failed

        - name: "Download cheat install file using jpillora"
          ansible.builtin.uri:
            url: "https://i.jpillora.com/cheat/cheat?type=script"
            return_content: true
          register: this
          ignore_errors: true
          when: url_check_result.failed

        - name: "Write install script to file"
          ansible.builtin.copy:
            content: "{{ this.content }}"
            dest: "/tmp/cheat.sh"
            mode: 0755
          ignore_errors: true
          register: install_file
          when: this.content is defined

        - name: "Show copy of /tmp/cheat.sh"
          ansible.builtin.debug:
            var: install_file

        - name: "Execute the remote bash script using shell"
          ansible.builtin.shell:
            cmd: "/tmp/cheat.sh"
            chdir: "/tmp/"
          ignore_errors: true
          when: install_file.rc == 0

        - name: "Move cheat"
          ansible.builtin.copy:
            src: "/tmp/cheat"
            dest: "/usr/local/bin/cheat"
            remote_src: true
            mode: 0755
            force: true
          ignore_errors: true

        - name: "Cleanup files"
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/cheat"
            - "/tmp/cheat.sh"
          ignore_errors: true
      when:
        - version_check_result.rc != 0 or
          (version_check_result.rc == 0 and
          current_version | default('0.0.0') is version(desired_version, '!='))
  vars:
    app_name: "cheat"
    repo_name: "cheat"
    owner_name: "cheat"
    app_version_command: "{{ app_name }} --version"
    version_regex: '(\d+\.\d+\.\d+)'
    github_api_url: "https://api.github.com/repos/{{ owner_name }}/{{ repo_name }}/releases/latest"

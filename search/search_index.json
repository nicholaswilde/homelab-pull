{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homelab Pull","text":"<p>An ansible-pull repo for my homelab.</p>"},{"location":"#tldr","title":"TL;DR","text":""},{"location":"#repo","title":"Repo","text":"<p>Code</p> <pre><code>cp host_vars/.template.yaml.tmpl host_vars/&lt;hostname&gt;.yaml\n</code></pre> <p>Edit <code>host_vars/&lt;hostname&gt;.yaml</code></p>"},{"location":"#managed-node","title":"Managed Node","text":"<p>Code</p> <pre><code>(\n  sudo apt update &amp;&amp; \\\n  sudo apt install -y curl &amp;&amp; \\\n  OWNER_NAME=\"nicholaswilde\" &amp;&amp; \\\n  REPO_NAME=\"homelab-pull\" &amp;&amp; \\\n  bash -c \"$(curl -fsSL https://raw.githubusercontent.com/${OWNER_NAME}/${REPO_NAME}/refs/heads/main/scripts/bootstrap.sh)\"\n)\n</code></pre> <p>Optionally, add ~/.local/bin to <code>PATH</code>.</p> <p>Code</p> <pre><code>export PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>Run <code>ansible-pull</code>.</p> <p>Code</p> <pre><code>ansible-pull -U https://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\"\n</code></pre>"},{"location":"#background","title":"Background","text":"<p>I'm currently using ansible to push configurations to my homelab containers via SSH. See my Homelab Playbooks repo.</p> <p>This repo is meant to be a test of using GitOps, similar to Flux CD, to configure my homelab by having each container pull this repo periodically and run ansible locally. Pros of this method are discussed in this Learn Linux TV video.</p> <p>A downside is that <code>ansible-pull</code> needs to be installed on all containers, thus taking up resources, which goes against my general homelab methodology.</p> <p>Container specific updates are handled using a Taskfile located on the container. The upgrades are configured in my homelab repo and are periodically triggered by this repo.</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>Inspiration for this repository has been taken from jktr/ansible-pull-example.</p>"},{"location":"#license","title":"License","text":"<p>\u200b\u200bApache License 2.0</p>"},{"location":"#author","title":"\u200bAuthor","text":"<p>\u200bThis project was started in 2025 by \u200bNicholas Wilde\u200b.</p>"},{"location":"#references","title":"References","text":""},{"location":"collections/","title":"Collections","text":"<p>To reduce the amount space needed on each of my containers, <code>ansible-core</code> installed and only the needed Ansible collections are used.</p> <p>Collections may be installed by hand beforehand, or using the <code>bootstrap.sh</code> script, but it was just easier to package them with the repo itself.</p> <p>An attempt to install the collections was made using Ansible pretasks, but ended up running into issues where Ansible would complain about not having the required collections installed before it even got to executing the pretasks.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#managed-node","title":"Managed Node","text":"<p>Find the hostname of the managed node.</p> <p>Code</p> <pre><code>uname -n\n# test-debian-1\n</code></pre>"},{"location":"configuration/#repo","title":"Repo","text":"<p>In the <code>homelab-pull</code> repo, create a <code>host_vars</code> file with the file name as the hostname, e.g. <code>host_vars/test-debian-1.yaml</code>.</p> <p>Code</p> <pre><code>cp host_vars/.template.yaml.tmpl host_vars/&lt;hostname&gt;.yaml\n</code></pre> <p>Add the groups the host is a part of to the <code>pull_groups</code> list.</p> <p>host_vars/hostname.yaml</p> <pre><code>---\nansible_user: root\npull_groups:\n  - lxcs\n</code></pre> <p>Create additional roles if needed.</p> <p>Update <code>playbook.yml</code> with which host groups run which roles.</p> <p>Update variables that being passed into each role. List of variables can be found under <code>roles/&lt;role name&gt;/defaults/main.yaml</code>.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>Install dependencies on the managed node.</p> <p>Code</p> <pre><code>(\n  sudo apt update\n  sudo apt install -y curl\n)\n</code></pre>"},{"location":"installation/#bootstrap","title":"Bootstrap","text":"<p>Use the bootstrap script to finish setting up the managed node by installing [<code>ansible-core</code>][10] as well as the required collections.</p> <p>Warning</p> <p>Always inspect a shell script before running it!</p> <p>Set variables used in the script.</p> <p>Code</p> <pre><code>(\n  OWNER_NAME=\"nicholaswilde\"\n  REPO_NAME=\"homelab-pull\"\n\n  REQUIREMENTS_URL=\"https://raw.githubusercontent.com/${OWNER_NAME}/${REPO_NAME}/refs/heads/main/requirements.yaml\"\n  PASSWORD_PATH=\"${HOME}/.config/homelab-pull/password\"\n)\n</code></pre> <p>Run the script.</p> <p>Code</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/${OWNER_NAME}/${REPO_NAME}/refs/heads/main/scripts/bootstrap.sh)\"\n</code></pre> <p>Note</p> <p>Debian based systems install ansible-core via <code>apt</code>, else via <code>pipx</code>.</p> <p>Add the <code>pipx</code> <code>bin</code> dir temporarily to <code>PATH</code>, if applicable.</p> <p>Code</p> <pre><code>export PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>Alternatively, add it permanently to <code>.bashrc</code>, if applicable.</p> <p>Code</p> <pre><code>(\n  echo 'export PATH=\"$PATH:$HOME/.local/bin\"' &gt;&gt; ~/.bashrc &amp;&amp; \\\n  source ~/.bashrc\n)\n</code></pre>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#testing-using-docker","title":"Testing Using Docker","text":"<p>Launch into a shell in a Debian Docker container.</p> <pre><code>docker run -it --rm -h \"$(uname -n)\" debian /bin/bash\n</code></pre> <p>In the Docker container.</p> <pre><code>cd ~ &amp;&amp; \\\napt update &amp;&amp; \\\napt install curl -y &amp;&amp; \\\nbash -c \"$(curl -fsSL https://raw.githubusercontent.com/nicholaswilde/homelab-pull/refs/heads/main/scripts/bootstrap.sh)\" &amp;&amp; \\\nexport PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>Test the playbook.</p> <pre><code>ansible-pull -U http://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\"\n</code></pre>"},{"location":"testing/#testing-with-a-specific-branch","title":"Testing with a Specific Branch","text":"<p>To test changes from a specific branch before they are merged into <code>main</code>, you can modify the <code>ansible-pull</code> command to target that branch.</p> <ol> <li> <p>Identify the branch name: For example, <code>my-feature-branch</code>.</p> </li> <li> <p>Modify the <code>ansible-pull</code> command:</p> <p>Change the URL in the <code>ansible-pull</code> command from <code>https://github.com/nicholaswilde/homelab-pull.git</code> (which defaults to the <code>main</code> branch) to point to your specific branch using the <code>-C</code> or <code>--checkout</code> option, or by specifying the branch in the URL if your <code>ansible-pull</code> version supports it directly for playbook repositories (though <code>-C</code> is more standard for specifying a branch).</p> <p>Using <code>-C</code> (checkout) option (recommended): This tells <code>ansible-pull</code> to checkout the specified branch after cloning.</p> <pre><code>ansible-pull -U https://github.com/nicholaswilde/homelab-pull.git -C my-feature-branch -i \"$(uname -n),\"\n</code></pre> <p>Replace <code>my-feature-branch</code> with the actual name of your branch.</p> </li> <li> <p>Bootstrap Script (if applicable for new setups):     If you are bootstrapping a new node and want it to use a specific branch from the start for the initial     <code>requirements.yaml</code> and scripts, you would need to modify the URLs within the bootstrap script itself before     running it. For example, changing <code>refs/heads/main</code> to <code>refs/heads/my-feature-branch</code> in the script's URL paths:</p> <p><pre><code>OWNER_NAME=\"nicholaswilde\"\nREPO_NAME=\"homelab-pull\"\nBRANCH_NAME=\"my-feature-branch\" # Specify your branch\n# ...\nbash -c \"$(curl -fsSL https://raw.githubusercontent.com/${OWNER_NAME}/${REPO_NAME}/refs/heads/${BRANCH_NAME}/scripts/bootstrap.sh)\"\n</code></pre> And similarly for the <code>REQUIREMENTS_URL</code> inside the script if it's hardcoded, or ensure your <code>ansible-pull</code> command used post-bootstrap points to the correct branch. The <code>ansible-pull</code> command shown above is the primary way to control the playbook branch after initial setup.</p> </li> </ol> <p>This allows you to test your changes in isolation on one or more managed nodes before merging to <code>main</code>.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Troubleshooting can be done by passing setting <code>debug_enabled</code> to <code>true</code> or passing in the <code>-vvv</code> argument.</p> <p>Debug enabled</p> <pre><code>ansible-pull -e \"debug_enabled=true\" -U http://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\"\n</code></pre> <p>Verbose</p> <pre><code>ansible-pull -vvv -U http://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\"\n</code></pre> <p>Individual task files can be tested by using tags, such as <code>test</code>.</p> <pre><code>- name: Setup tmux\n  ansible.builtin.include_tasks: \n    file: \"tmux.yaml\"\n    apply:\n      tags:\n        - tmux\n        - test\n  tags:\n    - always\n</code></pre> <p>Tag <code>test</code></p> <pre><code>ansible-pull --tags test -U http://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\" \n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>On the managed node that you'd like to run the playbook.</p> <p>Code</p> <pre><code>ansible-pull -U https://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\"\n</code></pre> <p>Note</p> <p>The comma <code>,</code> is required after <code>$(uname -n)</code></p>"},{"location":"usage/#tpm","title":"tpm","text":"<p>Sometimes the <code>tpm</code> doesn't install automatically and so it can be installed manually.</p> <ol> <li>Run <code>tmux</code>.</li> <li>Press <code>Ctrl + b + I</code></li> </ol> <p>A <code>homelab-pull</code> service and timer are installed to periodically run the playbook.</p>"},{"location":"usage/#tags","title":"Tags","text":"<p>Individual task files can be tested by using tags, such as <code>tmux</code>.</p> <pre><code>- name: Setup tmux\n  ansible.builtin.include_tasks: \n    file: \"tmux.yaml\"\n    apply:\n      tags:\n        - tmux\n  tags:\n    - always\n</code></pre> <p>Tag <code>tmux</code></p> <pre><code>ansible-pull --tags tmux -U http://github.com/nicholaswilde/homelab-pull.git -i \"$(uname -n),\" \n</code></pre>"},{"location":"usage/#logs","title":"Logs","text":"<p>View the logs.</p> <p>Code</p> <pre><code>journalctl -xeu homelab-pull\n</code></pre>"},{"location":"reference/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>","tags":["reference"]}]}